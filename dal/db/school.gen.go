// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Hanabi-wxl/dlu-design-system/dal/model"
)

func newSchool(db *gorm.DB, opts ...gen.DOOption) school {
	_school := school{}

	_school.schoolDo.UseDB(db, opts...)
	_school.schoolDo.UseModel(&model.School{})

	tableName := _school.schoolDo.TableName()
	_school.ALL = field.NewAsterisk(tableName)
	_school.ID = field.NewInt64(tableName, "id")
	_school.Name = field.NewString(tableName, "name")
	_school.Address = field.NewString(tableName, "address")
	_school.IsDelete = field.NewField(tableName, "is_delete")

	_school.fillFieldMap()

	return _school
}

type school struct {
	schoolDo

	ALL      field.Asterisk
	ID       field.Int64  // id
	Name     field.String // 名字
	Address  field.String // 地址
	IsDelete field.Field  // 存在标志

	fieldMap map[string]field.Expr
}

func (s school) Table(newTableName string) *school {
	s.schoolDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s school) As(alias string) *school {
	s.schoolDo.DO = *(s.schoolDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *school) updateTableName(table string) *school {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.Address = field.NewString(table, "address")
	s.IsDelete = field.NewField(table, "is_delete")

	s.fillFieldMap()

	return s
}

func (s *school) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *school) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["address"] = s.Address
	s.fieldMap["is_delete"] = s.IsDelete
}

func (s school) clone(db *gorm.DB) school {
	s.schoolDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s school) replaceDB(db *gorm.DB) school {
	s.schoolDo.ReplaceDB(db)
	return s
}

type schoolDo struct{ gen.DO }

type ISchoolDo interface {
	gen.SubQuery
	Debug() ISchoolDo
	WithContext(ctx context.Context) ISchoolDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISchoolDo
	WriteDB() ISchoolDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISchoolDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISchoolDo
	Not(conds ...gen.Condition) ISchoolDo
	Or(conds ...gen.Condition) ISchoolDo
	Select(conds ...field.Expr) ISchoolDo
	Where(conds ...gen.Condition) ISchoolDo
	Order(conds ...field.Expr) ISchoolDo
	Distinct(cols ...field.Expr) ISchoolDo
	Omit(cols ...field.Expr) ISchoolDo
	Join(table schema.Tabler, on ...field.Expr) ISchoolDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISchoolDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISchoolDo
	Group(cols ...field.Expr) ISchoolDo
	Having(conds ...gen.Condition) ISchoolDo
	Limit(limit int) ISchoolDo
	Offset(offset int) ISchoolDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISchoolDo
	Unscoped() ISchoolDo
	Create(values ...*model.School) error
	CreateInBatches(values []*model.School, batchSize int) error
	Save(values ...*model.School) error
	First() (*model.School, error)
	Take() (*model.School, error)
	Last() (*model.School, error)
	Find() ([]*model.School, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.School, err error)
	FindInBatches(result *[]*model.School, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.School) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISchoolDo
	Assign(attrs ...field.AssignExpr) ISchoolDo
	Joins(fields ...field.RelationField) ISchoolDo
	Preload(fields ...field.RelationField) ISchoolDo
	FirstOrInit() (*model.School, error)
	FirstOrCreate() (*model.School, error)
	FindByPage(offset int, limit int) (result []*model.School, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISchoolDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s schoolDo) Debug() ISchoolDo {
	return s.withDO(s.DO.Debug())
}

func (s schoolDo) WithContext(ctx context.Context) ISchoolDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s schoolDo) ReadDB() ISchoolDo {
	return s.Clauses(dbresolver.Read)
}

func (s schoolDo) WriteDB() ISchoolDo {
	return s.Clauses(dbresolver.Write)
}

func (s schoolDo) Session(config *gorm.Session) ISchoolDo {
	return s.withDO(s.DO.Session(config))
}

func (s schoolDo) Clauses(conds ...clause.Expression) ISchoolDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s schoolDo) Returning(value interface{}, columns ...string) ISchoolDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s schoolDo) Not(conds ...gen.Condition) ISchoolDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s schoolDo) Or(conds ...gen.Condition) ISchoolDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s schoolDo) Select(conds ...field.Expr) ISchoolDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s schoolDo) Where(conds ...gen.Condition) ISchoolDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s schoolDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISchoolDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s schoolDo) Order(conds ...field.Expr) ISchoolDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s schoolDo) Distinct(cols ...field.Expr) ISchoolDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s schoolDo) Omit(cols ...field.Expr) ISchoolDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s schoolDo) Join(table schema.Tabler, on ...field.Expr) ISchoolDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s schoolDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISchoolDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s schoolDo) RightJoin(table schema.Tabler, on ...field.Expr) ISchoolDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s schoolDo) Group(cols ...field.Expr) ISchoolDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s schoolDo) Having(conds ...gen.Condition) ISchoolDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s schoolDo) Limit(limit int) ISchoolDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s schoolDo) Offset(offset int) ISchoolDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s schoolDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISchoolDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s schoolDo) Unscoped() ISchoolDo {
	return s.withDO(s.DO.Unscoped())
}

func (s schoolDo) Create(values ...*model.School) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s schoolDo) CreateInBatches(values []*model.School, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s schoolDo) Save(values ...*model.School) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s schoolDo) First() (*model.School, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.School), nil
	}
}

func (s schoolDo) Take() (*model.School, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.School), nil
	}
}

func (s schoolDo) Last() (*model.School, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.School), nil
	}
}

func (s schoolDo) Find() ([]*model.School, error) {
	result, err := s.DO.Find()
	return result.([]*model.School), err
}

func (s schoolDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.School, err error) {
	buf := make([]*model.School, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s schoolDo) FindInBatches(result *[]*model.School, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s schoolDo) Attrs(attrs ...field.AssignExpr) ISchoolDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s schoolDo) Assign(attrs ...field.AssignExpr) ISchoolDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s schoolDo) Joins(fields ...field.RelationField) ISchoolDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s schoolDo) Preload(fields ...field.RelationField) ISchoolDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s schoolDo) FirstOrInit() (*model.School, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.School), nil
	}
}

func (s schoolDo) FirstOrCreate() (*model.School, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.School), nil
	}
}

func (s schoolDo) FindByPage(offset int, limit int) (result []*model.School, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s schoolDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s schoolDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s schoolDo) Delete(models ...*model.School) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *schoolDo) withDO(do gen.Dao) *schoolDo {
	s.DO = *do.(*gen.DO)
	return s
}
