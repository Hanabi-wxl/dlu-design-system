// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Hanabi-wxl/dlu-design-system/dal/model"
)

func newTeacherOffice(db *gorm.DB, opts ...gen.DOOption) teacherOffice {
	_teacherOffice := teacherOffice{}

	_teacherOffice.teacherOfficeDo.UseDB(db, opts...)
	_teacherOffice.teacherOfficeDo.UseModel(&model.TeacherOffice{})

	tableName := _teacherOffice.teacherOfficeDo.TableName()
	_teacherOffice.ALL = field.NewAsterisk(tableName)
	_teacherOffice.ID = field.NewInt64(tableName, "id")
	_teacherOffice.Name = field.NewString(tableName, "name")
	_teacherOffice.IsDelete = field.NewField(tableName, "is_delete")

	_teacherOffice.fillFieldMap()

	return _teacherOffice
}

type teacherOffice struct {
	teacherOfficeDo

	ALL      field.Asterisk
	ID       field.Int64  // id
	Name     field.String // 名称
	IsDelete field.Field  // 存在标志

	fieldMap map[string]field.Expr
}

func (t teacherOffice) Table(newTableName string) *teacherOffice {
	t.teacherOfficeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t teacherOffice) As(alias string) *teacherOffice {
	t.teacherOfficeDo.DO = *(t.teacherOfficeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *teacherOffice) updateTableName(table string) *teacherOffice {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")
	t.IsDelete = field.NewField(table, "is_delete")

	t.fillFieldMap()

	return t
}

func (t *teacherOffice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *teacherOffice) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["is_delete"] = t.IsDelete
}

func (t teacherOffice) clone(db *gorm.DB) teacherOffice {
	t.teacherOfficeDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t teacherOffice) replaceDB(db *gorm.DB) teacherOffice {
	t.teacherOfficeDo.ReplaceDB(db)
	return t
}

type teacherOfficeDo struct{ gen.DO }

type ITeacherOfficeDo interface {
	gen.SubQuery
	Debug() ITeacherOfficeDo
	WithContext(ctx context.Context) ITeacherOfficeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITeacherOfficeDo
	WriteDB() ITeacherOfficeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITeacherOfficeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITeacherOfficeDo
	Not(conds ...gen.Condition) ITeacherOfficeDo
	Or(conds ...gen.Condition) ITeacherOfficeDo
	Select(conds ...field.Expr) ITeacherOfficeDo
	Where(conds ...gen.Condition) ITeacherOfficeDo
	Order(conds ...field.Expr) ITeacherOfficeDo
	Distinct(cols ...field.Expr) ITeacherOfficeDo
	Omit(cols ...field.Expr) ITeacherOfficeDo
	Join(table schema.Tabler, on ...field.Expr) ITeacherOfficeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITeacherOfficeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITeacherOfficeDo
	Group(cols ...field.Expr) ITeacherOfficeDo
	Having(conds ...gen.Condition) ITeacherOfficeDo
	Limit(limit int) ITeacherOfficeDo
	Offset(offset int) ITeacherOfficeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITeacherOfficeDo
	Unscoped() ITeacherOfficeDo
	Create(values ...*model.TeacherOffice) error
	CreateInBatches(values []*model.TeacherOffice, batchSize int) error
	Save(values ...*model.TeacherOffice) error
	First() (*model.TeacherOffice, error)
	Take() (*model.TeacherOffice, error)
	Last() (*model.TeacherOffice, error)
	Find() ([]*model.TeacherOffice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TeacherOffice, err error)
	FindInBatches(result *[]*model.TeacherOffice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TeacherOffice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITeacherOfficeDo
	Assign(attrs ...field.AssignExpr) ITeacherOfficeDo
	Joins(fields ...field.RelationField) ITeacherOfficeDo
	Preload(fields ...field.RelationField) ITeacherOfficeDo
	FirstOrInit() (*model.TeacherOffice, error)
	FirstOrCreate() (*model.TeacherOffice, error)
	FindByPage(offset int, limit int) (result []*model.TeacherOffice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITeacherOfficeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t teacherOfficeDo) Debug() ITeacherOfficeDo {
	return t.withDO(t.DO.Debug())
}

func (t teacherOfficeDo) WithContext(ctx context.Context) ITeacherOfficeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t teacherOfficeDo) ReadDB() ITeacherOfficeDo {
	return t.Clauses(dbresolver.Read)
}

func (t teacherOfficeDo) WriteDB() ITeacherOfficeDo {
	return t.Clauses(dbresolver.Write)
}

func (t teacherOfficeDo) Session(config *gorm.Session) ITeacherOfficeDo {
	return t.withDO(t.DO.Session(config))
}

func (t teacherOfficeDo) Clauses(conds ...clause.Expression) ITeacherOfficeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t teacherOfficeDo) Returning(value interface{}, columns ...string) ITeacherOfficeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t teacherOfficeDo) Not(conds ...gen.Condition) ITeacherOfficeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t teacherOfficeDo) Or(conds ...gen.Condition) ITeacherOfficeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t teacherOfficeDo) Select(conds ...field.Expr) ITeacherOfficeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t teacherOfficeDo) Where(conds ...gen.Condition) ITeacherOfficeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t teacherOfficeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITeacherOfficeDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t teacherOfficeDo) Order(conds ...field.Expr) ITeacherOfficeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t teacherOfficeDo) Distinct(cols ...field.Expr) ITeacherOfficeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t teacherOfficeDo) Omit(cols ...field.Expr) ITeacherOfficeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t teacherOfficeDo) Join(table schema.Tabler, on ...field.Expr) ITeacherOfficeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t teacherOfficeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITeacherOfficeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t teacherOfficeDo) RightJoin(table schema.Tabler, on ...field.Expr) ITeacherOfficeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t teacherOfficeDo) Group(cols ...field.Expr) ITeacherOfficeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t teacherOfficeDo) Having(conds ...gen.Condition) ITeacherOfficeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t teacherOfficeDo) Limit(limit int) ITeacherOfficeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t teacherOfficeDo) Offset(offset int) ITeacherOfficeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t teacherOfficeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITeacherOfficeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t teacherOfficeDo) Unscoped() ITeacherOfficeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t teacherOfficeDo) Create(values ...*model.TeacherOffice) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t teacherOfficeDo) CreateInBatches(values []*model.TeacherOffice, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t teacherOfficeDo) Save(values ...*model.TeacherOffice) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t teacherOfficeDo) First() (*model.TeacherOffice, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherOffice), nil
	}
}

func (t teacherOfficeDo) Take() (*model.TeacherOffice, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherOffice), nil
	}
}

func (t teacherOfficeDo) Last() (*model.TeacherOffice, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherOffice), nil
	}
}

func (t teacherOfficeDo) Find() ([]*model.TeacherOffice, error) {
	result, err := t.DO.Find()
	return result.([]*model.TeacherOffice), err
}

func (t teacherOfficeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TeacherOffice, err error) {
	buf := make([]*model.TeacherOffice, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t teacherOfficeDo) FindInBatches(result *[]*model.TeacherOffice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t teacherOfficeDo) Attrs(attrs ...field.AssignExpr) ITeacherOfficeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t teacherOfficeDo) Assign(attrs ...field.AssignExpr) ITeacherOfficeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t teacherOfficeDo) Joins(fields ...field.RelationField) ITeacherOfficeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t teacherOfficeDo) Preload(fields ...field.RelationField) ITeacherOfficeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t teacherOfficeDo) FirstOrInit() (*model.TeacherOffice, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherOffice), nil
	}
}

func (t teacherOfficeDo) FirstOrCreate() (*model.TeacherOffice, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherOffice), nil
	}
}

func (t teacherOfficeDo) FindByPage(offset int, limit int) (result []*model.TeacherOffice, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t teacherOfficeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t teacherOfficeDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t teacherOfficeDo) Delete(models ...*model.TeacherOffice) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *teacherOfficeDo) withDO(do gen.Dao) *teacherOfficeDo {
	t.DO = *do.(*gen.DO)
	return t
}
