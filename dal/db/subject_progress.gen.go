// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Hanabi-wxl/dlu-design-system/dal/model"
)

func newSubjectProgress(db *gorm.DB, opts ...gen.DOOption) subjectProgress {
	_subjectProgress := subjectProgress{}

	_subjectProgress.subjectProgressDo.UseDB(db, opts...)
	_subjectProgress.subjectProgressDo.UseModel(&model.SubjectProgress{})

	tableName := _subjectProgress.subjectProgressDo.TableName()
	_subjectProgress.ALL = field.NewAsterisk(tableName)
	_subjectProgress.ID = field.NewInt64(tableName, "id")
	_subjectProgress.Name = field.NewString(tableName, "name")

	_subjectProgress.fillFieldMap()

	return _subjectProgress
}

type subjectProgress struct {
	subjectProgressDo

	ALL  field.Asterisk
	ID   field.Int64  // id
	Name field.String // 名称

	fieldMap map[string]field.Expr
}

func (s subjectProgress) Table(newTableName string) *subjectProgress {
	s.subjectProgressDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s subjectProgress) As(alias string) *subjectProgress {
	s.subjectProgressDo.DO = *(s.subjectProgressDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *subjectProgress) updateTableName(table string) *subjectProgress {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")

	s.fillFieldMap()

	return s
}

func (s *subjectProgress) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *subjectProgress) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
}

func (s subjectProgress) clone(db *gorm.DB) subjectProgress {
	s.subjectProgressDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s subjectProgress) replaceDB(db *gorm.DB) subjectProgress {
	s.subjectProgressDo.ReplaceDB(db)
	return s
}

type subjectProgressDo struct{ gen.DO }

type ISubjectProgressDo interface {
	gen.SubQuery
	Debug() ISubjectProgressDo
	WithContext(ctx context.Context) ISubjectProgressDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISubjectProgressDo
	WriteDB() ISubjectProgressDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISubjectProgressDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISubjectProgressDo
	Not(conds ...gen.Condition) ISubjectProgressDo
	Or(conds ...gen.Condition) ISubjectProgressDo
	Select(conds ...field.Expr) ISubjectProgressDo
	Where(conds ...gen.Condition) ISubjectProgressDo
	Order(conds ...field.Expr) ISubjectProgressDo
	Distinct(cols ...field.Expr) ISubjectProgressDo
	Omit(cols ...field.Expr) ISubjectProgressDo
	Join(table schema.Tabler, on ...field.Expr) ISubjectProgressDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISubjectProgressDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISubjectProgressDo
	Group(cols ...field.Expr) ISubjectProgressDo
	Having(conds ...gen.Condition) ISubjectProgressDo
	Limit(limit int) ISubjectProgressDo
	Offset(offset int) ISubjectProgressDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISubjectProgressDo
	Unscoped() ISubjectProgressDo
	Create(values ...*model.SubjectProgress) error
	CreateInBatches(values []*model.SubjectProgress, batchSize int) error
	Save(values ...*model.SubjectProgress) error
	First() (*model.SubjectProgress, error)
	Take() (*model.SubjectProgress, error)
	Last() (*model.SubjectProgress, error)
	Find() ([]*model.SubjectProgress, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SubjectProgress, err error)
	FindInBatches(result *[]*model.SubjectProgress, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SubjectProgress) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISubjectProgressDo
	Assign(attrs ...field.AssignExpr) ISubjectProgressDo
	Joins(fields ...field.RelationField) ISubjectProgressDo
	Preload(fields ...field.RelationField) ISubjectProgressDo
	FirstOrInit() (*model.SubjectProgress, error)
	FirstOrCreate() (*model.SubjectProgress, error)
	FindByPage(offset int, limit int) (result []*model.SubjectProgress, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISubjectProgressDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s subjectProgressDo) Debug() ISubjectProgressDo {
	return s.withDO(s.DO.Debug())
}

func (s subjectProgressDo) WithContext(ctx context.Context) ISubjectProgressDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s subjectProgressDo) ReadDB() ISubjectProgressDo {
	return s.Clauses(dbresolver.Read)
}

func (s subjectProgressDo) WriteDB() ISubjectProgressDo {
	return s.Clauses(dbresolver.Write)
}

func (s subjectProgressDo) Session(config *gorm.Session) ISubjectProgressDo {
	return s.withDO(s.DO.Session(config))
}

func (s subjectProgressDo) Clauses(conds ...clause.Expression) ISubjectProgressDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s subjectProgressDo) Returning(value interface{}, columns ...string) ISubjectProgressDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s subjectProgressDo) Not(conds ...gen.Condition) ISubjectProgressDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s subjectProgressDo) Or(conds ...gen.Condition) ISubjectProgressDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s subjectProgressDo) Select(conds ...field.Expr) ISubjectProgressDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s subjectProgressDo) Where(conds ...gen.Condition) ISubjectProgressDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s subjectProgressDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISubjectProgressDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s subjectProgressDo) Order(conds ...field.Expr) ISubjectProgressDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s subjectProgressDo) Distinct(cols ...field.Expr) ISubjectProgressDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s subjectProgressDo) Omit(cols ...field.Expr) ISubjectProgressDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s subjectProgressDo) Join(table schema.Tabler, on ...field.Expr) ISubjectProgressDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s subjectProgressDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISubjectProgressDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s subjectProgressDo) RightJoin(table schema.Tabler, on ...field.Expr) ISubjectProgressDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s subjectProgressDo) Group(cols ...field.Expr) ISubjectProgressDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s subjectProgressDo) Having(conds ...gen.Condition) ISubjectProgressDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s subjectProgressDo) Limit(limit int) ISubjectProgressDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s subjectProgressDo) Offset(offset int) ISubjectProgressDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s subjectProgressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISubjectProgressDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s subjectProgressDo) Unscoped() ISubjectProgressDo {
	return s.withDO(s.DO.Unscoped())
}

func (s subjectProgressDo) Create(values ...*model.SubjectProgress) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s subjectProgressDo) CreateInBatches(values []*model.SubjectProgress, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s subjectProgressDo) Save(values ...*model.SubjectProgress) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s subjectProgressDo) First() (*model.SubjectProgress, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubjectProgress), nil
	}
}

func (s subjectProgressDo) Take() (*model.SubjectProgress, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubjectProgress), nil
	}
}

func (s subjectProgressDo) Last() (*model.SubjectProgress, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubjectProgress), nil
	}
}

func (s subjectProgressDo) Find() ([]*model.SubjectProgress, error) {
	result, err := s.DO.Find()
	return result.([]*model.SubjectProgress), err
}

func (s subjectProgressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SubjectProgress, err error) {
	buf := make([]*model.SubjectProgress, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s subjectProgressDo) FindInBatches(result *[]*model.SubjectProgress, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s subjectProgressDo) Attrs(attrs ...field.AssignExpr) ISubjectProgressDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s subjectProgressDo) Assign(attrs ...field.AssignExpr) ISubjectProgressDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s subjectProgressDo) Joins(fields ...field.RelationField) ISubjectProgressDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s subjectProgressDo) Preload(fields ...field.RelationField) ISubjectProgressDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s subjectProgressDo) FirstOrInit() (*model.SubjectProgress, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubjectProgress), nil
	}
}

func (s subjectProgressDo) FirstOrCreate() (*model.SubjectProgress, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubjectProgress), nil
	}
}

func (s subjectProgressDo) FindByPage(offset int, limit int) (result []*model.SubjectProgress, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s subjectProgressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s subjectProgressDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s subjectProgressDo) Delete(models ...*model.SubjectProgress) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *subjectProgressDo) withDO(do gen.Dao) *subjectProgressDo {
	s.DO = *do.(*gen.DO)
	return s
}
