// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Hanabi-wxl/dlu-design-system/dal/model"
)

func newSubject(db *gorm.DB, opts ...gen.DOOption) subject {
	_subject := subject{}

	_subject.subjectDo.UseDB(db, opts...)
	_subject.subjectDo.UseModel(&model.Subject{})

	tableName := _subject.subjectDo.TableName()
	_subject.ALL = field.NewAsterisk(tableName)
	_subject.ID = field.NewInt64(tableName, "id")
	_subject.Headline = field.NewString(tableName, "headline")
	_subject.FirstTeacherID = field.NewInt64(tableName, "first_teacher_id")
	_subject.SecondTeacherID = field.NewInt64(tableName, "second_teacher_id")
	_subject.StudentID = field.NewInt64(tableName, "student_id")
	_subject.ProgressID = field.NewInt64(tableName, "progress_id")
	_subject.CollegeID = field.NewInt64(tableName, "college_id")
	_subject.MajorID = field.NewInt64(tableName, "major_id")
	_subject.RoleID = field.NewInt64(tableName, "role_id")
	_subject.Year = field.NewInt64(tableName, "year")
	_subject.Abstract = field.NewString(tableName, "abstract")
	_subject.Necessity = field.NewString(tableName, "necessity")
	_subject.Feasibility = field.NewString(tableName, "feasibility")
	_subject.Identical = field.NewInt8(tableName, "identical")
	_subject.TypeID = field.NewInt8(tableName, "type_id")
	_subject.OriginID = field.NewInt8(tableName, "origin_id")
	_subject.NeedTotal = field.NewInt64(tableName, "need_total")
	_subject.MajorApprovalOpinion = field.NewString(tableName, "major_approval_opinion")
	_subject.MajorApprovalTime = field.NewTime(tableName, "major_approval_time")
	_subject.MajorApproverID = field.NewInt64(tableName, "major_approver_id")
	_subject.CollegeApprovalOpinion = field.NewString(tableName, "college_approval_opinion")
	_subject.CollegeApprovalTime = field.NewTime(tableName, "college_approval_time")
	_subject.CollegeApproverID = field.NewInt64(tableName, "college_approver_id")
	_subject.IsDelete = field.NewField(tableName, "is_delete")

	_subject.fillFieldMap()

	return _subject
}

type subject struct {
	subjectDo

	ALL                    field.Asterisk
	ID                     field.Int64  // id
	Headline               field.String // 标题
	FirstTeacherID         field.Int64  // 第一指导老师
	SecondTeacherID        field.Int64  // 第二指导老师
	StudentID              field.Int64  // 学生id
	ProgressID             field.Int64  // 题目状态
	CollegeID              field.Int64  // 学院
	MajorID                field.Int64  // 专业id
	RoleID                 field.Int64  // 申报人角色
	Year                   field.Int64  // 年份
	Abstract               field.String // 摘要
	Necessity              field.String // 选题的必要性
	Feasibility            field.String // 选题的可行性
	Identical              field.Int8   // 三年内是否有雷同题目
	TypeID                 field.Int8   // 毕业论文类型
	OriginID               field.Int8   // 题目来源
	NeedTotal              field.Int64  // 拟需人数
	MajorApprovalOpinion   field.String // 专业审批意见
	MajorApprovalTime      field.Time   // 专业审批通过时间
	MajorApproverID        field.Int64  // 专业审批人
	CollegeApprovalOpinion field.String // 学院审批意见
	CollegeApprovalTime    field.Time   // 学院审批通过时间
	CollegeApproverID      field.Int64  // 学院审批人
	IsDelete               field.Field  // 存在标志

	fieldMap map[string]field.Expr
}

func (s subject) Table(newTableName string) *subject {
	s.subjectDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s subject) As(alias string) *subject {
	s.subjectDo.DO = *(s.subjectDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *subject) updateTableName(table string) *subject {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Headline = field.NewString(table, "headline")
	s.FirstTeacherID = field.NewInt64(table, "first_teacher_id")
	s.SecondTeacherID = field.NewInt64(table, "second_teacher_id")
	s.StudentID = field.NewInt64(table, "student_id")
	s.ProgressID = field.NewInt64(table, "progress_id")
	s.CollegeID = field.NewInt64(table, "college_id")
	s.MajorID = field.NewInt64(table, "major_id")
	s.RoleID = field.NewInt64(table, "role_id")
	s.Year = field.NewInt64(table, "year")
	s.Abstract = field.NewString(table, "abstract")
	s.Necessity = field.NewString(table, "necessity")
	s.Feasibility = field.NewString(table, "feasibility")
	s.Identical = field.NewInt8(table, "identical")
	s.TypeID = field.NewInt8(table, "type_id")
	s.OriginID = field.NewInt8(table, "origin_id")
	s.NeedTotal = field.NewInt64(table, "need_total")
	s.MajorApprovalOpinion = field.NewString(table, "major_approval_opinion")
	s.MajorApprovalTime = field.NewTime(table, "major_approval_time")
	s.MajorApproverID = field.NewInt64(table, "major_approver_id")
	s.CollegeApprovalOpinion = field.NewString(table, "college_approval_opinion")
	s.CollegeApprovalTime = field.NewTime(table, "college_approval_time")
	s.CollegeApproverID = field.NewInt64(table, "college_approver_id")
	s.IsDelete = field.NewField(table, "is_delete")

	s.fillFieldMap()

	return s
}

func (s *subject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *subject) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 24)
	s.fieldMap["id"] = s.ID
	s.fieldMap["headline"] = s.Headline
	s.fieldMap["first_teacher_id"] = s.FirstTeacherID
	s.fieldMap["second_teacher_id"] = s.SecondTeacherID
	s.fieldMap["student_id"] = s.StudentID
	s.fieldMap["progress_id"] = s.ProgressID
	s.fieldMap["college_id"] = s.CollegeID
	s.fieldMap["major_id"] = s.MajorID
	s.fieldMap["role_id"] = s.RoleID
	s.fieldMap["year"] = s.Year
	s.fieldMap["abstract"] = s.Abstract
	s.fieldMap["necessity"] = s.Necessity
	s.fieldMap["feasibility"] = s.Feasibility
	s.fieldMap["identical"] = s.Identical
	s.fieldMap["type_id"] = s.TypeID
	s.fieldMap["origin_id"] = s.OriginID
	s.fieldMap["need_total"] = s.NeedTotal
	s.fieldMap["major_approval_opinion"] = s.MajorApprovalOpinion
	s.fieldMap["major_approval_time"] = s.MajorApprovalTime
	s.fieldMap["major_approver_id"] = s.MajorApproverID
	s.fieldMap["college_approval_opinion"] = s.CollegeApprovalOpinion
	s.fieldMap["college_approval_time"] = s.CollegeApprovalTime
	s.fieldMap["college_approver_id"] = s.CollegeApproverID
	s.fieldMap["is_delete"] = s.IsDelete
}

func (s subject) clone(db *gorm.DB) subject {
	s.subjectDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s subject) replaceDB(db *gorm.DB) subject {
	s.subjectDo.ReplaceDB(db)
	return s
}

type subjectDo struct{ gen.DO }

type ISubjectDo interface {
	gen.SubQuery
	Debug() ISubjectDo
	WithContext(ctx context.Context) ISubjectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISubjectDo
	WriteDB() ISubjectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISubjectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISubjectDo
	Not(conds ...gen.Condition) ISubjectDo
	Or(conds ...gen.Condition) ISubjectDo
	Select(conds ...field.Expr) ISubjectDo
	Where(conds ...gen.Condition) ISubjectDo
	Order(conds ...field.Expr) ISubjectDo
	Distinct(cols ...field.Expr) ISubjectDo
	Omit(cols ...field.Expr) ISubjectDo
	Join(table schema.Tabler, on ...field.Expr) ISubjectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISubjectDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISubjectDo
	Group(cols ...field.Expr) ISubjectDo
	Having(conds ...gen.Condition) ISubjectDo
	Limit(limit int) ISubjectDo
	Offset(offset int) ISubjectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISubjectDo
	Unscoped() ISubjectDo
	Create(values ...*model.Subject) error
	CreateInBatches(values []*model.Subject, batchSize int) error
	Save(values ...*model.Subject) error
	First() (*model.Subject, error)
	Take() (*model.Subject, error)
	Last() (*model.Subject, error)
	Find() ([]*model.Subject, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Subject, err error)
	FindInBatches(result *[]*model.Subject, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Subject) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISubjectDo
	Assign(attrs ...field.AssignExpr) ISubjectDo
	Joins(fields ...field.RelationField) ISubjectDo
	Preload(fields ...field.RelationField) ISubjectDo
	FirstOrInit() (*model.Subject, error)
	FirstOrCreate() (*model.Subject, error)
	FindByPage(offset int, limit int) (result []*model.Subject, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISubjectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s subjectDo) Debug() ISubjectDo {
	return s.withDO(s.DO.Debug())
}

func (s subjectDo) WithContext(ctx context.Context) ISubjectDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s subjectDo) ReadDB() ISubjectDo {
	return s.Clauses(dbresolver.Read)
}

func (s subjectDo) WriteDB() ISubjectDo {
	return s.Clauses(dbresolver.Write)
}

func (s subjectDo) Session(config *gorm.Session) ISubjectDo {
	return s.withDO(s.DO.Session(config))
}

func (s subjectDo) Clauses(conds ...clause.Expression) ISubjectDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s subjectDo) Returning(value interface{}, columns ...string) ISubjectDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s subjectDo) Not(conds ...gen.Condition) ISubjectDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s subjectDo) Or(conds ...gen.Condition) ISubjectDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s subjectDo) Select(conds ...field.Expr) ISubjectDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s subjectDo) Where(conds ...gen.Condition) ISubjectDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s subjectDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISubjectDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s subjectDo) Order(conds ...field.Expr) ISubjectDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s subjectDo) Distinct(cols ...field.Expr) ISubjectDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s subjectDo) Omit(cols ...field.Expr) ISubjectDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s subjectDo) Join(table schema.Tabler, on ...field.Expr) ISubjectDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s subjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISubjectDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s subjectDo) RightJoin(table schema.Tabler, on ...field.Expr) ISubjectDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s subjectDo) Group(cols ...field.Expr) ISubjectDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s subjectDo) Having(conds ...gen.Condition) ISubjectDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s subjectDo) Limit(limit int) ISubjectDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s subjectDo) Offset(offset int) ISubjectDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s subjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISubjectDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s subjectDo) Unscoped() ISubjectDo {
	return s.withDO(s.DO.Unscoped())
}

func (s subjectDo) Create(values ...*model.Subject) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s subjectDo) CreateInBatches(values []*model.Subject, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s subjectDo) Save(values ...*model.Subject) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s subjectDo) First() (*model.Subject, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Subject), nil
	}
}

func (s subjectDo) Take() (*model.Subject, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Subject), nil
	}
}

func (s subjectDo) Last() (*model.Subject, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Subject), nil
	}
}

func (s subjectDo) Find() ([]*model.Subject, error) {
	result, err := s.DO.Find()
	return result.([]*model.Subject), err
}

func (s subjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Subject, err error) {
	buf := make([]*model.Subject, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s subjectDo) FindInBatches(result *[]*model.Subject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s subjectDo) Attrs(attrs ...field.AssignExpr) ISubjectDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s subjectDo) Assign(attrs ...field.AssignExpr) ISubjectDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s subjectDo) Joins(fields ...field.RelationField) ISubjectDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s subjectDo) Preload(fields ...field.RelationField) ISubjectDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s subjectDo) FirstOrInit() (*model.Subject, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Subject), nil
	}
}

func (s subjectDo) FirstOrCreate() (*model.Subject, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Subject), nil
	}
}

func (s subjectDo) FindByPage(offset int, limit int) (result []*model.Subject, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s subjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s subjectDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s subjectDo) Delete(models ...*model.Subject) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *subjectDo) withDO(do gen.Dao) *subjectDo {
	s.DO = *do.(*gen.DO)
	return s
}
