// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Hanabi-wxl/dlu-design-system/dal/model"
)

func newAppoint(db *gorm.DB, opts ...gen.DOOption) appoint {
	_appoint := appoint{}

	_appoint.appointDo.UseDB(db, opts...)
	_appoint.appointDo.UseModel(&model.Appoint{})

	tableName := _appoint.appointDo.TableName()
	_appoint.ALL = field.NewAsterisk(tableName)
	_appoint.ID = field.NewInt64(tableName, "id")
	_appoint.SendID = field.NewInt64(tableName, "send_id")
	_appoint.ReceiveID = field.NewInt64(tableName, "receive_id")
	_appoint.SubjectID = field.NewInt64(tableName, "subject_id")
	_appoint.CreatedAt = field.NewTime(tableName, "created_at")
	_appoint.IsDelete = field.NewField(tableName, "is_delete")

	_appoint.fillFieldMap()

	return _appoint
}

type appoint struct {
	appointDo

	ALL       field.Asterisk
	ID        field.Int64 // id
	SendID    field.Int64 // 发放权限的教师id
	ReceiveID field.Int64 // 接收权限的教师id
	SubjectID field.Int64 // 题目id
	CreatedAt field.Time  // 委任时间
	IsDelete  field.Field // 存在标志

	fieldMap map[string]field.Expr
}

func (a appoint) Table(newTableName string) *appoint {
	a.appointDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appoint) As(alias string) *appoint {
	a.appointDo.DO = *(a.appointDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appoint) updateTableName(table string) *appoint {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.SendID = field.NewInt64(table, "send_id")
	a.ReceiveID = field.NewInt64(table, "receive_id")
	a.SubjectID = field.NewInt64(table, "subject_id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.IsDelete = field.NewField(table, "is_delete")

	a.fillFieldMap()

	return a
}

func (a *appoint) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appoint) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["send_id"] = a.SendID
	a.fieldMap["receive_id"] = a.ReceiveID
	a.fieldMap["subject_id"] = a.SubjectID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["is_delete"] = a.IsDelete
}

func (a appoint) clone(db *gorm.DB) appoint {
	a.appointDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appoint) replaceDB(db *gorm.DB) appoint {
	a.appointDo.ReplaceDB(db)
	return a
}

type appointDo struct{ gen.DO }

type IAppointDo interface {
	gen.SubQuery
	Debug() IAppointDo
	WithContext(ctx context.Context) IAppointDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppointDo
	WriteDB() IAppointDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppointDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppointDo
	Not(conds ...gen.Condition) IAppointDo
	Or(conds ...gen.Condition) IAppointDo
	Select(conds ...field.Expr) IAppointDo
	Where(conds ...gen.Condition) IAppointDo
	Order(conds ...field.Expr) IAppointDo
	Distinct(cols ...field.Expr) IAppointDo
	Omit(cols ...field.Expr) IAppointDo
	Join(table schema.Tabler, on ...field.Expr) IAppointDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppointDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppointDo
	Group(cols ...field.Expr) IAppointDo
	Having(conds ...gen.Condition) IAppointDo
	Limit(limit int) IAppointDo
	Offset(offset int) IAppointDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppointDo
	Unscoped() IAppointDo
	Create(values ...*model.Appoint) error
	CreateInBatches(values []*model.Appoint, batchSize int) error
	Save(values ...*model.Appoint) error
	First() (*model.Appoint, error)
	Take() (*model.Appoint, error)
	Last() (*model.Appoint, error)
	Find() ([]*model.Appoint, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appoint, err error)
	FindInBatches(result *[]*model.Appoint, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Appoint) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppointDo
	Assign(attrs ...field.AssignExpr) IAppointDo
	Joins(fields ...field.RelationField) IAppointDo
	Preload(fields ...field.RelationField) IAppointDo
	FirstOrInit() (*model.Appoint, error)
	FirstOrCreate() (*model.Appoint, error)
	FindByPage(offset int, limit int) (result []*model.Appoint, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppointDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appointDo) Debug() IAppointDo {
	return a.withDO(a.DO.Debug())
}

func (a appointDo) WithContext(ctx context.Context) IAppointDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appointDo) ReadDB() IAppointDo {
	return a.Clauses(dbresolver.Read)
}

func (a appointDo) WriteDB() IAppointDo {
	return a.Clauses(dbresolver.Write)
}

func (a appointDo) Session(config *gorm.Session) IAppointDo {
	return a.withDO(a.DO.Session(config))
}

func (a appointDo) Clauses(conds ...clause.Expression) IAppointDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appointDo) Returning(value interface{}, columns ...string) IAppointDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appointDo) Not(conds ...gen.Condition) IAppointDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appointDo) Or(conds ...gen.Condition) IAppointDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appointDo) Select(conds ...field.Expr) IAppointDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appointDo) Where(conds ...gen.Condition) IAppointDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appointDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAppointDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a appointDo) Order(conds ...field.Expr) IAppointDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appointDo) Distinct(cols ...field.Expr) IAppointDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appointDo) Omit(cols ...field.Expr) IAppointDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appointDo) Join(table schema.Tabler, on ...field.Expr) IAppointDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appointDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppointDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appointDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppointDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appointDo) Group(cols ...field.Expr) IAppointDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appointDo) Having(conds ...gen.Condition) IAppointDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appointDo) Limit(limit int) IAppointDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appointDo) Offset(offset int) IAppointDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appointDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppointDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appointDo) Unscoped() IAppointDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appointDo) Create(values ...*model.Appoint) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appointDo) CreateInBatches(values []*model.Appoint, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appointDo) Save(values ...*model.Appoint) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appointDo) First() (*model.Appoint, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appoint), nil
	}
}

func (a appointDo) Take() (*model.Appoint, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appoint), nil
	}
}

func (a appointDo) Last() (*model.Appoint, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appoint), nil
	}
}

func (a appointDo) Find() ([]*model.Appoint, error) {
	result, err := a.DO.Find()
	return result.([]*model.Appoint), err
}

func (a appointDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appoint, err error) {
	buf := make([]*model.Appoint, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appointDo) FindInBatches(result *[]*model.Appoint, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appointDo) Attrs(attrs ...field.AssignExpr) IAppointDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appointDo) Assign(attrs ...field.AssignExpr) IAppointDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appointDo) Joins(fields ...field.RelationField) IAppointDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appointDo) Preload(fields ...field.RelationField) IAppointDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appointDo) FirstOrInit() (*model.Appoint, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appoint), nil
	}
}

func (a appointDo) FirstOrCreate() (*model.Appoint, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appoint), nil
	}
}

func (a appointDo) FindByPage(offset int, limit int) (result []*model.Appoint, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appointDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appointDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appointDo) Delete(models ...*model.Appoint) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appointDo) withDO(do gen.Dao) *appointDo {
	a.DO = *do.(*gen.DO)
	return a
}
