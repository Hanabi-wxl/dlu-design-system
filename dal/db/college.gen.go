// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Hanabi-wxl/dlu-design-system/dal/model"
)

func newCollege(db *gorm.DB, opts ...gen.DOOption) college {
	_college := college{}

	_college.collegeDo.UseDB(db, opts...)
	_college.collegeDo.UseModel(&model.College{})

	tableName := _college.collegeDo.TableName()
	_college.ALL = field.NewAsterisk(tableName)
	_college.ID = field.NewInt64(tableName, "id")
	_college.Name = field.NewString(tableName, "name")
	_college.IsDelete = field.NewField(tableName, "is_delete")

	_college.fillFieldMap()

	return _college
}

type college struct {
	collegeDo

	ALL      field.Asterisk
	ID       field.Int64  // id
	Name     field.String // 学院名称
	IsDelete field.Field  // 是否有效

	fieldMap map[string]field.Expr
}

func (c college) Table(newTableName string) *college {
	c.collegeDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c college) As(alias string) *college {
	c.collegeDo.DO = *(c.collegeDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *college) updateTableName(table string) *college {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Name = field.NewString(table, "name")
	c.IsDelete = field.NewField(table, "is_delete")

	c.fillFieldMap()

	return c
}

func (c *college) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *college) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["is_delete"] = c.IsDelete
}

func (c college) clone(db *gorm.DB) college {
	c.collegeDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c college) replaceDB(db *gorm.DB) college {
	c.collegeDo.ReplaceDB(db)
	return c
}

type collegeDo struct{ gen.DO }

type ICollegeDo interface {
	gen.SubQuery
	Debug() ICollegeDo
	WithContext(ctx context.Context) ICollegeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICollegeDo
	WriteDB() ICollegeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICollegeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICollegeDo
	Not(conds ...gen.Condition) ICollegeDo
	Or(conds ...gen.Condition) ICollegeDo
	Select(conds ...field.Expr) ICollegeDo
	Where(conds ...gen.Condition) ICollegeDo
	Order(conds ...field.Expr) ICollegeDo
	Distinct(cols ...field.Expr) ICollegeDo
	Omit(cols ...field.Expr) ICollegeDo
	Join(table schema.Tabler, on ...field.Expr) ICollegeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICollegeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICollegeDo
	Group(cols ...field.Expr) ICollegeDo
	Having(conds ...gen.Condition) ICollegeDo
	Limit(limit int) ICollegeDo
	Offset(offset int) ICollegeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICollegeDo
	Unscoped() ICollegeDo
	Create(values ...*model.College) error
	CreateInBatches(values []*model.College, batchSize int) error
	Save(values ...*model.College) error
	First() (*model.College, error)
	Take() (*model.College, error)
	Last() (*model.College, error)
	Find() ([]*model.College, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.College, err error)
	FindInBatches(result *[]*model.College, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.College) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICollegeDo
	Assign(attrs ...field.AssignExpr) ICollegeDo
	Joins(fields ...field.RelationField) ICollegeDo
	Preload(fields ...field.RelationField) ICollegeDo
	FirstOrInit() (*model.College, error)
	FirstOrCreate() (*model.College, error)
	FindByPage(offset int, limit int) (result []*model.College, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICollegeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c collegeDo) Debug() ICollegeDo {
	return c.withDO(c.DO.Debug())
}

func (c collegeDo) WithContext(ctx context.Context) ICollegeDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c collegeDo) ReadDB() ICollegeDo {
	return c.Clauses(dbresolver.Read)
}

func (c collegeDo) WriteDB() ICollegeDo {
	return c.Clauses(dbresolver.Write)
}

func (c collegeDo) Session(config *gorm.Session) ICollegeDo {
	return c.withDO(c.DO.Session(config))
}

func (c collegeDo) Clauses(conds ...clause.Expression) ICollegeDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c collegeDo) Returning(value interface{}, columns ...string) ICollegeDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c collegeDo) Not(conds ...gen.Condition) ICollegeDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c collegeDo) Or(conds ...gen.Condition) ICollegeDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c collegeDo) Select(conds ...field.Expr) ICollegeDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c collegeDo) Where(conds ...gen.Condition) ICollegeDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c collegeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICollegeDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c collegeDo) Order(conds ...field.Expr) ICollegeDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c collegeDo) Distinct(cols ...field.Expr) ICollegeDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c collegeDo) Omit(cols ...field.Expr) ICollegeDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c collegeDo) Join(table schema.Tabler, on ...field.Expr) ICollegeDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c collegeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICollegeDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c collegeDo) RightJoin(table schema.Tabler, on ...field.Expr) ICollegeDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c collegeDo) Group(cols ...field.Expr) ICollegeDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c collegeDo) Having(conds ...gen.Condition) ICollegeDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c collegeDo) Limit(limit int) ICollegeDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c collegeDo) Offset(offset int) ICollegeDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c collegeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICollegeDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c collegeDo) Unscoped() ICollegeDo {
	return c.withDO(c.DO.Unscoped())
}

func (c collegeDo) Create(values ...*model.College) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c collegeDo) CreateInBatches(values []*model.College, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c collegeDo) Save(values ...*model.College) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c collegeDo) First() (*model.College, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.College), nil
	}
}

func (c collegeDo) Take() (*model.College, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.College), nil
	}
}

func (c collegeDo) Last() (*model.College, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.College), nil
	}
}

func (c collegeDo) Find() ([]*model.College, error) {
	result, err := c.DO.Find()
	return result.([]*model.College), err
}

func (c collegeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.College, err error) {
	buf := make([]*model.College, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c collegeDo) FindInBatches(result *[]*model.College, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c collegeDo) Attrs(attrs ...field.AssignExpr) ICollegeDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c collegeDo) Assign(attrs ...field.AssignExpr) ICollegeDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c collegeDo) Joins(fields ...field.RelationField) ICollegeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c collegeDo) Preload(fields ...field.RelationField) ICollegeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c collegeDo) FirstOrInit() (*model.College, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.College), nil
	}
}

func (c collegeDo) FirstOrCreate() (*model.College, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.College), nil
	}
}

func (c collegeDo) FindByPage(offset int, limit int) (result []*model.College, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c collegeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c collegeDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c collegeDo) Delete(models ...*model.College) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *collegeDo) withDO(do gen.Dao) *collegeDo {
	c.DO = *do.(*gen.DO)
	return c
}
