// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Hanabi-wxl/dlu-design-system/dal/model"
)

func newTeacherDegree(db *gorm.DB, opts ...gen.DOOption) teacherDegree {
	_teacherDegree := teacherDegree{}

	_teacherDegree.teacherDegreeDo.UseDB(db, opts...)
	_teacherDegree.teacherDegreeDo.UseModel(&model.TeacherDegree{})

	tableName := _teacherDegree.teacherDegreeDo.TableName()
	_teacherDegree.ALL = field.NewAsterisk(tableName)
	_teacherDegree.ID = field.NewInt64(tableName, "id")
	_teacherDegree.Name = field.NewString(tableName, "name")
	_teacherDegree.IsDelete = field.NewField(tableName, "is_delete")

	_teacherDegree.fillFieldMap()

	return _teacherDegree
}

type teacherDegree struct {
	teacherDegreeDo

	ALL      field.Asterisk
	ID       field.Int64  // id
	Name     field.String // 名称
	IsDelete field.Field  // 存在标志

	fieldMap map[string]field.Expr
}

func (t teacherDegree) Table(newTableName string) *teacherDegree {
	t.teacherDegreeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t teacherDegree) As(alias string) *teacherDegree {
	t.teacherDegreeDo.DO = *(t.teacherDegreeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *teacherDegree) updateTableName(table string) *teacherDegree {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")
	t.IsDelete = field.NewField(table, "is_delete")

	t.fillFieldMap()

	return t
}

func (t *teacherDegree) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *teacherDegree) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["is_delete"] = t.IsDelete
}

func (t teacherDegree) clone(db *gorm.DB) teacherDegree {
	t.teacherDegreeDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t teacherDegree) replaceDB(db *gorm.DB) teacherDegree {
	t.teacherDegreeDo.ReplaceDB(db)
	return t
}

type teacherDegreeDo struct{ gen.DO }

type ITeacherDegreeDo interface {
	gen.SubQuery
	Debug() ITeacherDegreeDo
	WithContext(ctx context.Context) ITeacherDegreeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITeacherDegreeDo
	WriteDB() ITeacherDegreeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITeacherDegreeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITeacherDegreeDo
	Not(conds ...gen.Condition) ITeacherDegreeDo
	Or(conds ...gen.Condition) ITeacherDegreeDo
	Select(conds ...field.Expr) ITeacherDegreeDo
	Where(conds ...gen.Condition) ITeacherDegreeDo
	Order(conds ...field.Expr) ITeacherDegreeDo
	Distinct(cols ...field.Expr) ITeacherDegreeDo
	Omit(cols ...field.Expr) ITeacherDegreeDo
	Join(table schema.Tabler, on ...field.Expr) ITeacherDegreeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITeacherDegreeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITeacherDegreeDo
	Group(cols ...field.Expr) ITeacherDegreeDo
	Having(conds ...gen.Condition) ITeacherDegreeDo
	Limit(limit int) ITeacherDegreeDo
	Offset(offset int) ITeacherDegreeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITeacherDegreeDo
	Unscoped() ITeacherDegreeDo
	Create(values ...*model.TeacherDegree) error
	CreateInBatches(values []*model.TeacherDegree, batchSize int) error
	Save(values ...*model.TeacherDegree) error
	First() (*model.TeacherDegree, error)
	Take() (*model.TeacherDegree, error)
	Last() (*model.TeacherDegree, error)
	Find() ([]*model.TeacherDegree, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TeacherDegree, err error)
	FindInBatches(result *[]*model.TeacherDegree, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TeacherDegree) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITeacherDegreeDo
	Assign(attrs ...field.AssignExpr) ITeacherDegreeDo
	Joins(fields ...field.RelationField) ITeacherDegreeDo
	Preload(fields ...field.RelationField) ITeacherDegreeDo
	FirstOrInit() (*model.TeacherDegree, error)
	FirstOrCreate() (*model.TeacherDegree, error)
	FindByPage(offset int, limit int) (result []*model.TeacherDegree, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITeacherDegreeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t teacherDegreeDo) Debug() ITeacherDegreeDo {
	return t.withDO(t.DO.Debug())
}

func (t teacherDegreeDo) WithContext(ctx context.Context) ITeacherDegreeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t teacherDegreeDo) ReadDB() ITeacherDegreeDo {
	return t.Clauses(dbresolver.Read)
}

func (t teacherDegreeDo) WriteDB() ITeacherDegreeDo {
	return t.Clauses(dbresolver.Write)
}

func (t teacherDegreeDo) Session(config *gorm.Session) ITeacherDegreeDo {
	return t.withDO(t.DO.Session(config))
}

func (t teacherDegreeDo) Clauses(conds ...clause.Expression) ITeacherDegreeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t teacherDegreeDo) Returning(value interface{}, columns ...string) ITeacherDegreeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t teacherDegreeDo) Not(conds ...gen.Condition) ITeacherDegreeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t teacherDegreeDo) Or(conds ...gen.Condition) ITeacherDegreeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t teacherDegreeDo) Select(conds ...field.Expr) ITeacherDegreeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t teacherDegreeDo) Where(conds ...gen.Condition) ITeacherDegreeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t teacherDegreeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITeacherDegreeDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t teacherDegreeDo) Order(conds ...field.Expr) ITeacherDegreeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t teacherDegreeDo) Distinct(cols ...field.Expr) ITeacherDegreeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t teacherDegreeDo) Omit(cols ...field.Expr) ITeacherDegreeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t teacherDegreeDo) Join(table schema.Tabler, on ...field.Expr) ITeacherDegreeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t teacherDegreeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITeacherDegreeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t teacherDegreeDo) RightJoin(table schema.Tabler, on ...field.Expr) ITeacherDegreeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t teacherDegreeDo) Group(cols ...field.Expr) ITeacherDegreeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t teacherDegreeDo) Having(conds ...gen.Condition) ITeacherDegreeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t teacherDegreeDo) Limit(limit int) ITeacherDegreeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t teacherDegreeDo) Offset(offset int) ITeacherDegreeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t teacherDegreeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITeacherDegreeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t teacherDegreeDo) Unscoped() ITeacherDegreeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t teacherDegreeDo) Create(values ...*model.TeacherDegree) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t teacherDegreeDo) CreateInBatches(values []*model.TeacherDegree, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t teacherDegreeDo) Save(values ...*model.TeacherDegree) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t teacherDegreeDo) First() (*model.TeacherDegree, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherDegree), nil
	}
}

func (t teacherDegreeDo) Take() (*model.TeacherDegree, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherDegree), nil
	}
}

func (t teacherDegreeDo) Last() (*model.TeacherDegree, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherDegree), nil
	}
}

func (t teacherDegreeDo) Find() ([]*model.TeacherDegree, error) {
	result, err := t.DO.Find()
	return result.([]*model.TeacherDegree), err
}

func (t teacherDegreeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TeacherDegree, err error) {
	buf := make([]*model.TeacherDegree, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t teacherDegreeDo) FindInBatches(result *[]*model.TeacherDegree, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t teacherDegreeDo) Attrs(attrs ...field.AssignExpr) ITeacherDegreeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t teacherDegreeDo) Assign(attrs ...field.AssignExpr) ITeacherDegreeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t teacherDegreeDo) Joins(fields ...field.RelationField) ITeacherDegreeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t teacherDegreeDo) Preload(fields ...field.RelationField) ITeacherDegreeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t teacherDegreeDo) FirstOrInit() (*model.TeacherDegree, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherDegree), nil
	}
}

func (t teacherDegreeDo) FirstOrCreate() (*model.TeacherDegree, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherDegree), nil
	}
}

func (t teacherDegreeDo) FindByPage(offset int, limit int) (result []*model.TeacherDegree, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t teacherDegreeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t teacherDegreeDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t teacherDegreeDo) Delete(models ...*model.TeacherDegree) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *teacherDegreeDo) withDO(do gen.Dao) *teacherDegreeDo {
	t.DO = *do.(*gen.DO)
	return t
}
