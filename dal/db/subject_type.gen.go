// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Hanabi-wxl/dlu-design-system/dal/model"
)

func newSubjectType(db *gorm.DB, opts ...gen.DOOption) subjectType {
	_subjectType := subjectType{}

	_subjectType.subjectTypeDo.UseDB(db, opts...)
	_subjectType.subjectTypeDo.UseModel(&model.SubjectType{})

	tableName := _subjectType.subjectTypeDo.TableName()
	_subjectType.ALL = field.NewAsterisk(tableName)
	_subjectType.ID = field.NewInt64(tableName, "id")
	_subjectType.Name = field.NewString(tableName, "name")
	_subjectType.IsDelete = field.NewField(tableName, "is_delete")

	_subjectType.fillFieldMap()

	return _subjectType
}

type subjectType struct {
	subjectTypeDo

	ALL      field.Asterisk
	ID       field.Int64  // id
	Name     field.String // 名称
	IsDelete field.Field  // 存在标志

	fieldMap map[string]field.Expr
}

func (s subjectType) Table(newTableName string) *subjectType {
	s.subjectTypeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s subjectType) As(alias string) *subjectType {
	s.subjectTypeDo.DO = *(s.subjectTypeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *subjectType) updateTableName(table string) *subjectType {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.IsDelete = field.NewField(table, "is_delete")

	s.fillFieldMap()

	return s
}

func (s *subjectType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *subjectType) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["is_delete"] = s.IsDelete
}

func (s subjectType) clone(db *gorm.DB) subjectType {
	s.subjectTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s subjectType) replaceDB(db *gorm.DB) subjectType {
	s.subjectTypeDo.ReplaceDB(db)
	return s
}

type subjectTypeDo struct{ gen.DO }

type ISubjectTypeDo interface {
	gen.SubQuery
	Debug() ISubjectTypeDo
	WithContext(ctx context.Context) ISubjectTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISubjectTypeDo
	WriteDB() ISubjectTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISubjectTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISubjectTypeDo
	Not(conds ...gen.Condition) ISubjectTypeDo
	Or(conds ...gen.Condition) ISubjectTypeDo
	Select(conds ...field.Expr) ISubjectTypeDo
	Where(conds ...gen.Condition) ISubjectTypeDo
	Order(conds ...field.Expr) ISubjectTypeDo
	Distinct(cols ...field.Expr) ISubjectTypeDo
	Omit(cols ...field.Expr) ISubjectTypeDo
	Join(table schema.Tabler, on ...field.Expr) ISubjectTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISubjectTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISubjectTypeDo
	Group(cols ...field.Expr) ISubjectTypeDo
	Having(conds ...gen.Condition) ISubjectTypeDo
	Limit(limit int) ISubjectTypeDo
	Offset(offset int) ISubjectTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISubjectTypeDo
	Unscoped() ISubjectTypeDo
	Create(values ...*model.SubjectType) error
	CreateInBatches(values []*model.SubjectType, batchSize int) error
	Save(values ...*model.SubjectType) error
	First() (*model.SubjectType, error)
	Take() (*model.SubjectType, error)
	Last() (*model.SubjectType, error)
	Find() ([]*model.SubjectType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SubjectType, err error)
	FindInBatches(result *[]*model.SubjectType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SubjectType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISubjectTypeDo
	Assign(attrs ...field.AssignExpr) ISubjectTypeDo
	Joins(fields ...field.RelationField) ISubjectTypeDo
	Preload(fields ...field.RelationField) ISubjectTypeDo
	FirstOrInit() (*model.SubjectType, error)
	FirstOrCreate() (*model.SubjectType, error)
	FindByPage(offset int, limit int) (result []*model.SubjectType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISubjectTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s subjectTypeDo) Debug() ISubjectTypeDo {
	return s.withDO(s.DO.Debug())
}

func (s subjectTypeDo) WithContext(ctx context.Context) ISubjectTypeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s subjectTypeDo) ReadDB() ISubjectTypeDo {
	return s.Clauses(dbresolver.Read)
}

func (s subjectTypeDo) WriteDB() ISubjectTypeDo {
	return s.Clauses(dbresolver.Write)
}

func (s subjectTypeDo) Session(config *gorm.Session) ISubjectTypeDo {
	return s.withDO(s.DO.Session(config))
}

func (s subjectTypeDo) Clauses(conds ...clause.Expression) ISubjectTypeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s subjectTypeDo) Returning(value interface{}, columns ...string) ISubjectTypeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s subjectTypeDo) Not(conds ...gen.Condition) ISubjectTypeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s subjectTypeDo) Or(conds ...gen.Condition) ISubjectTypeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s subjectTypeDo) Select(conds ...field.Expr) ISubjectTypeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s subjectTypeDo) Where(conds ...gen.Condition) ISubjectTypeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s subjectTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISubjectTypeDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s subjectTypeDo) Order(conds ...field.Expr) ISubjectTypeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s subjectTypeDo) Distinct(cols ...field.Expr) ISubjectTypeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s subjectTypeDo) Omit(cols ...field.Expr) ISubjectTypeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s subjectTypeDo) Join(table schema.Tabler, on ...field.Expr) ISubjectTypeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s subjectTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISubjectTypeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s subjectTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISubjectTypeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s subjectTypeDo) Group(cols ...field.Expr) ISubjectTypeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s subjectTypeDo) Having(conds ...gen.Condition) ISubjectTypeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s subjectTypeDo) Limit(limit int) ISubjectTypeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s subjectTypeDo) Offset(offset int) ISubjectTypeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s subjectTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISubjectTypeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s subjectTypeDo) Unscoped() ISubjectTypeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s subjectTypeDo) Create(values ...*model.SubjectType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s subjectTypeDo) CreateInBatches(values []*model.SubjectType, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s subjectTypeDo) Save(values ...*model.SubjectType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s subjectTypeDo) First() (*model.SubjectType, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubjectType), nil
	}
}

func (s subjectTypeDo) Take() (*model.SubjectType, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubjectType), nil
	}
}

func (s subjectTypeDo) Last() (*model.SubjectType, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubjectType), nil
	}
}

func (s subjectTypeDo) Find() ([]*model.SubjectType, error) {
	result, err := s.DO.Find()
	return result.([]*model.SubjectType), err
}

func (s subjectTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SubjectType, err error) {
	buf := make([]*model.SubjectType, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s subjectTypeDo) FindInBatches(result *[]*model.SubjectType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s subjectTypeDo) Attrs(attrs ...field.AssignExpr) ISubjectTypeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s subjectTypeDo) Assign(attrs ...field.AssignExpr) ISubjectTypeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s subjectTypeDo) Joins(fields ...field.RelationField) ISubjectTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s subjectTypeDo) Preload(fields ...field.RelationField) ISubjectTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s subjectTypeDo) FirstOrInit() (*model.SubjectType, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubjectType), nil
	}
}

func (s subjectTypeDo) FirstOrCreate() (*model.SubjectType, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubjectType), nil
	}
}

func (s subjectTypeDo) FindByPage(offset int, limit int) (result []*model.SubjectType, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s subjectTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s subjectTypeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s subjectTypeDo) Delete(models ...*model.SubjectType) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *subjectTypeDo) withDO(do gen.Dao) *subjectTypeDo {
	s.DO = *do.(*gen.DO)
	return s
}
