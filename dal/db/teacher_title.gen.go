// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Hanabi-wxl/dlu-design-system/dal/model"
)

func newTeacherTitle(db *gorm.DB, opts ...gen.DOOption) teacherTitle {
	_teacherTitle := teacherTitle{}

	_teacherTitle.teacherTitleDo.UseDB(db, opts...)
	_teacherTitle.teacherTitleDo.UseModel(&model.TeacherTitle{})

	tableName := _teacherTitle.teacherTitleDo.TableName()
	_teacherTitle.ALL = field.NewAsterisk(tableName)
	_teacherTitle.ID = field.NewInt64(tableName, "id")
	_teacherTitle.Name = field.NewString(tableName, "name")
	_teacherTitle.Level = field.NewInt8(tableName, "level")
	_teacherTitle.IsDelete = field.NewField(tableName, "is_delete")

	_teacherTitle.fillFieldMap()

	return _teacherTitle
}

type teacherTitle struct {
	teacherTitleDo

	ALL      field.Asterisk
	ID       field.Int64  // id
	Name     field.String // 名称
	Level    field.Int8   // 等级
	IsDelete field.Field  // 存在标志

	fieldMap map[string]field.Expr
}

func (t teacherTitle) Table(newTableName string) *teacherTitle {
	t.teacherTitleDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t teacherTitle) As(alias string) *teacherTitle {
	t.teacherTitleDo.DO = *(t.teacherTitleDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *teacherTitle) updateTableName(table string) *teacherTitle {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")
	t.Level = field.NewInt8(table, "level")
	t.IsDelete = field.NewField(table, "is_delete")

	t.fillFieldMap()

	return t
}

func (t *teacherTitle) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *teacherTitle) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["level"] = t.Level
	t.fieldMap["is_delete"] = t.IsDelete
}

func (t teacherTitle) clone(db *gorm.DB) teacherTitle {
	t.teacherTitleDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t teacherTitle) replaceDB(db *gorm.DB) teacherTitle {
	t.teacherTitleDo.ReplaceDB(db)
	return t
}

type teacherTitleDo struct{ gen.DO }

type ITeacherTitleDo interface {
	gen.SubQuery
	Debug() ITeacherTitleDo
	WithContext(ctx context.Context) ITeacherTitleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITeacherTitleDo
	WriteDB() ITeacherTitleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITeacherTitleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITeacherTitleDo
	Not(conds ...gen.Condition) ITeacherTitleDo
	Or(conds ...gen.Condition) ITeacherTitleDo
	Select(conds ...field.Expr) ITeacherTitleDo
	Where(conds ...gen.Condition) ITeacherTitleDo
	Order(conds ...field.Expr) ITeacherTitleDo
	Distinct(cols ...field.Expr) ITeacherTitleDo
	Omit(cols ...field.Expr) ITeacherTitleDo
	Join(table schema.Tabler, on ...field.Expr) ITeacherTitleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITeacherTitleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITeacherTitleDo
	Group(cols ...field.Expr) ITeacherTitleDo
	Having(conds ...gen.Condition) ITeacherTitleDo
	Limit(limit int) ITeacherTitleDo
	Offset(offset int) ITeacherTitleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITeacherTitleDo
	Unscoped() ITeacherTitleDo
	Create(values ...*model.TeacherTitle) error
	CreateInBatches(values []*model.TeacherTitle, batchSize int) error
	Save(values ...*model.TeacherTitle) error
	First() (*model.TeacherTitle, error)
	Take() (*model.TeacherTitle, error)
	Last() (*model.TeacherTitle, error)
	Find() ([]*model.TeacherTitle, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TeacherTitle, err error)
	FindInBatches(result *[]*model.TeacherTitle, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TeacherTitle) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITeacherTitleDo
	Assign(attrs ...field.AssignExpr) ITeacherTitleDo
	Joins(fields ...field.RelationField) ITeacherTitleDo
	Preload(fields ...field.RelationField) ITeacherTitleDo
	FirstOrInit() (*model.TeacherTitle, error)
	FirstOrCreate() (*model.TeacherTitle, error)
	FindByPage(offset int, limit int) (result []*model.TeacherTitle, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITeacherTitleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t teacherTitleDo) Debug() ITeacherTitleDo {
	return t.withDO(t.DO.Debug())
}

func (t teacherTitleDo) WithContext(ctx context.Context) ITeacherTitleDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t teacherTitleDo) ReadDB() ITeacherTitleDo {
	return t.Clauses(dbresolver.Read)
}

func (t teacherTitleDo) WriteDB() ITeacherTitleDo {
	return t.Clauses(dbresolver.Write)
}

func (t teacherTitleDo) Session(config *gorm.Session) ITeacherTitleDo {
	return t.withDO(t.DO.Session(config))
}

func (t teacherTitleDo) Clauses(conds ...clause.Expression) ITeacherTitleDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t teacherTitleDo) Returning(value interface{}, columns ...string) ITeacherTitleDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t teacherTitleDo) Not(conds ...gen.Condition) ITeacherTitleDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t teacherTitleDo) Or(conds ...gen.Condition) ITeacherTitleDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t teacherTitleDo) Select(conds ...field.Expr) ITeacherTitleDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t teacherTitleDo) Where(conds ...gen.Condition) ITeacherTitleDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t teacherTitleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITeacherTitleDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t teacherTitleDo) Order(conds ...field.Expr) ITeacherTitleDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t teacherTitleDo) Distinct(cols ...field.Expr) ITeacherTitleDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t teacherTitleDo) Omit(cols ...field.Expr) ITeacherTitleDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t teacherTitleDo) Join(table schema.Tabler, on ...field.Expr) ITeacherTitleDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t teacherTitleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITeacherTitleDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t teacherTitleDo) RightJoin(table schema.Tabler, on ...field.Expr) ITeacherTitleDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t teacherTitleDo) Group(cols ...field.Expr) ITeacherTitleDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t teacherTitleDo) Having(conds ...gen.Condition) ITeacherTitleDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t teacherTitleDo) Limit(limit int) ITeacherTitleDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t teacherTitleDo) Offset(offset int) ITeacherTitleDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t teacherTitleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITeacherTitleDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t teacherTitleDo) Unscoped() ITeacherTitleDo {
	return t.withDO(t.DO.Unscoped())
}

func (t teacherTitleDo) Create(values ...*model.TeacherTitle) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t teacherTitleDo) CreateInBatches(values []*model.TeacherTitle, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t teacherTitleDo) Save(values ...*model.TeacherTitle) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t teacherTitleDo) First() (*model.TeacherTitle, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherTitle), nil
	}
}

func (t teacherTitleDo) Take() (*model.TeacherTitle, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherTitle), nil
	}
}

func (t teacherTitleDo) Last() (*model.TeacherTitle, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherTitle), nil
	}
}

func (t teacherTitleDo) Find() ([]*model.TeacherTitle, error) {
	result, err := t.DO.Find()
	return result.([]*model.TeacherTitle), err
}

func (t teacherTitleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TeacherTitle, err error) {
	buf := make([]*model.TeacherTitle, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t teacherTitleDo) FindInBatches(result *[]*model.TeacherTitle, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t teacherTitleDo) Attrs(attrs ...field.AssignExpr) ITeacherTitleDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t teacherTitleDo) Assign(attrs ...field.AssignExpr) ITeacherTitleDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t teacherTitleDo) Joins(fields ...field.RelationField) ITeacherTitleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t teacherTitleDo) Preload(fields ...field.RelationField) ITeacherTitleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t teacherTitleDo) FirstOrInit() (*model.TeacherTitle, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherTitle), nil
	}
}

func (t teacherTitleDo) FirstOrCreate() (*model.TeacherTitle, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherTitle), nil
	}
}

func (t teacherTitleDo) FindByPage(offset int, limit int) (result []*model.TeacherTitle, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t teacherTitleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t teacherTitleDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t teacherTitleDo) Delete(models ...*model.TeacherTitle) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *teacherTitleDo) withDO(do gen.Dao) *teacherTitleDo {
	t.DO = *do.(*gen.DO)
	return t
}
